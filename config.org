* Terminal Settings

** hide startup-message

#+BEGIN_SRC emacs-lisp
;; hide startup frame message
(setq inhibit-startup-message t)
#+END_SRC

** hide tool-bar menu-bar scroll-bar
#+BEGIN_SRC emacs-lisp
;; hide tool-bar
(tool-bar-mode -1)

;; hide menu-bar
(menu-bar-mode -1)

;; hide scroll-bar
(scroll-bar-mode -1)
#+END_SRC

** backupfile setting
#+BEGIN_SRC emacs-lisp
;; backupfile setting
;; (setq make-backup-files nil)
;; (setq auto-save-default nil)
#+END_SRC

** yes-or-no change to y-or-n

#+BEGIN_SRC emacs-lisp
;; yes-or-no change to y-or-n
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** ansi-term
#+BEGIN_SRC emacs-lisp
;; (defvar my-fish-shell "/usr/local/bin/fish")
;; (defvar my-zsh-shell "/usr/local/bin/zsh")
;; (defadvice ansi-term (before force-bash)
;;   (interactive (list my-fish-shell)))
;; (ad-activate 'ansi-term)

(global-set-key (kbd "<s-return>") 'ansi-term)
#+END_SRC

** scroll-conservatively
#+BEGIN_SRC emacs-lisp
(setq scroll-conservatively 100)
#+END_SRC

** ring-bell ignore
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC

** kill buffer `C-x k` rebind
Doing C-x k should kill the current buffer at all times, we have ibuffer for more sophisticated thing.
#+BEGIN_SRC emacs-lisp
(defun kill-current-buffer ()
  "Kills the current buffer."
  (interactive)
  (kill-buffer (current-buffer)))
(global-set-key (kbd "C-x k") 'kill-current-buffer)
#+END_SRC

** switch-window
#+BEGIN_SRC emacs-lisp
(use-package switch-window
  :ensure t
  :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
        '("a" "s" "d" "f" "j" "k" "l" "i" "o"))
  :bind
    ([remap other-window] . switch-window))
#+END_SRC

** Following window splits
After you split a window, your focus remains in the previous one. This annoyed me so much I wrote these two, they take care of it.
#+BEGIN_SRC emacs-lisp
(defun split-and-follow-horizontally ()
  (interactive)
  (split-window-below)
  (balance-windows)
  (other-window 1))
(global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

(defun split-and-follow-vertically ()
  (interactive)
  (split-window-right)
  (balance-windows)
  (other-window 1))
(global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC

* Mode

** global-hl-line-mode & global-prettify-symbols-mode
#+BEGIN_SRC emacs-lisp
;; mode set
(when window-system (global-hl-line-mode t))
(global-prettify-symbols-mode t)
#+END_SRC

** ido-mode
#+BEGIN_SRC emacs-lisp
  ;; ido-mode
  (setq ido-enalbe-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+END_SRC

** raibow
#00FF00 显示 颜色环绕
#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  :ensure t
  :init
    (add-hook 'prog-mode-hook 'rainbow-mode))
#+END_SRC

** line and column mode
Show the current line and column for your cursor. We are not going to have relative-linum-mode in every major mode, so this is useful.
#+BEGIN_SRC emacs-lisp
(setq line-number-mode t)
(setq column-number-mode t)
#+END_SRC

* Theme
  
Install these themes first
Choose Theme use `M-x customize-themes`

** spacemacs-theme

#+BEGIN_SRC emacs-lisp
;; install spacemacs-theme
(unless (package-installed-p 'spacemacs-theme)
  (package-refresh-contents)
  (package-install 'spacemacs-theme))
#+END_SRC

** dracula-theme
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'dracula-theme)
  (package-refresh-contents)
  (package-install 'dracula-theme))
#+END_SRC

* Packages

** which-key

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :init
  (which-key-mode))
#+END_SRC

** beacon

#+BEGIN_SRC emacs-lisp
(use-package beacon
  :ensure t
  :init
  (beacon-mode 1))
#+END_SRC

** avy
`M-s` 输入首字母，然后 输入显示的 组合字母 快速定位
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+END_SRC

* Easy Function
** Copy a line `C-c l c`
Regardless of where your cursor is, this quickly copies a line.
#+BEGIN_SRC emas-lisp
(defun daedreth/copy-whole-line ()
  "Copies a line without regard for cursor position."
  (interactive)
  (save-excursion
    (kill-new
     (buffer-substring
      (point-at-bol)
      (point-at-eol)))))
(global-set-key (kbd "C-c l c") 'daedreth/copy-whole-line)
#+END_SRC
** Kill a line `C-c l k`
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c l k") 'kill-whole-line)
#+END_SRC

** Copy word `C-c w c`
#+BEGIN_SRC emas-lisp
(defun daedreth/copy-whole-word ()
  (interactive)
  (save-excursion
    (forward-char 1)
    (backward-word)
    (kill-word 1)
    (yank)))
(global-set-key (kbd "C-c w c") 'daedreth/copy-whole-word)
#+END_SRC

** Kill word `C-c w k`
#+BEGIN_SRC emacs-lisp
(defun daedreth/kill-inner-word ()
  "Kills the entire word your cursor is in. Equivalent to 'ciw' in vim."
  (interactive)
  (forward-char 1)
  (backward-word)
  (kill-word 1))
(global-set-key (kbd "C-c w k") 'daedreth/kill-inner-word)

#+END_SRC

** Config edit `C-c e`
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+END_SRC

** Config reload `C-c r`
#+BEGIN_SRC emacs-lisp
  (defun config-reload()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
* Org

** org-bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC

